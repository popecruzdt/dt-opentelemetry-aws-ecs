receivers:
  # collect aws ecs metrics
  awsecscontainermetrics:
    collection_interval: 30s

  # listen for signals on otlp endpoint
  otlp:
    protocols:
      grpc:
      http:

processors:
  # batch processor
  batch:
    send_batch_max_size: 1000
    timeout: 30s
    send_batch_size: 800
  # memory limiter
  memory_limiter:
    check_interval: 1s
    limit_percentage: 70
    spike_limit_percentage: 30
  # cumulative sum to delta metrics
  cumulativetodelta: {}
  # dynatrace relevant attributes
  resource/dt:
    attributes:
    - key: telemetry.sdk.name
      value: opentelemetry
      action: insert
    - key: dynatrace.otel.collector
      value: aws-ecs-fargate
      action: insert

  # filter signals
  filter/resources:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - .*memory.reserved
          - .*memory.utilized
          - .*cpu.reserved
          - .*cpu.utilized
          - .*network.rate.rx
          - .*network.rate.tx
          - .*storage.read_bytes
          - .*storage.write_bytes
  # transform metrics
  metricstransform/aws:
    transforms:
      - include: ecs.task.memory.utilized
        action: update
        new_name: MemoryUtilized
      - include: ecs.task.memory.reserved
        action: update
        new_name: MemoryReserved
      - include: ecs.task.cpu.utilized
        action: update
        new_name: CpuUtilized
      - include: ecs.task.cpu.reserved
        action: update
        new_name: CpuReserved
      - include: ecs.task.network.rate.rx
        action: update
        new_name: NetworkRxBytes
      - include: ecs.task.network.rate.tx
        action: update
        new_name: NetworkTxBytes
      - include: ecs.task.storage.read_bytes
        action: update
        new_name: StorageReadBytes
      - include: ecs.task.storage.write_bytes
        action: update
        new_name: StorageWriteBytes
  # modify resource attributes
  resource/aws:
    attributes:
      - key: ClusterName
        from_attribute: aws.ecs.cluster.name
        action: insert
      - key: aws.ecs.cluster.name
        action: delete
      - key: ServiceName
        from_attribute: aws.ecs.service.name
        action: insert
      - key: aws.ecs.service.name
        action: delete
      - key: TaskId
        from_attribute: aws.ecs.task.id
        action: insert
      - key: aws.ecs.task.id
        action: delete
      - key: TaskDefinitionFamily
        from_attribute: aws.ecs.task.family
        action: insert
      - key: aws.ecs.task.family
        action: delete
      - key: ContainerName
        from_attribute: container.name
        action: insert
      - key: container.name
        action: delete 

exporters:
  # otlphttp to dynatrace using environment variable
  otlphttp/dynatrace:
    endpoint: "${env:DT_ENDPOINT}"
    headers:
      Authorization: "Api-Token ${env:DT_API_TOKEN}"
  
  # debug
  debug:
    verbosity: basic
    sampling_initial: 5
    sampling_thereafter: 20

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource/dt, resource/aws, batch]
      exporters: [debug, otlphttp/dynatrace]
    metrics:
      receivers: [otlp, awsecscontainermetrics]
      processors: [memory_limiter, resource/dt, resource/aws, cumulativetodelta, batch]
      exporters: [debug, otlphttp/dynatrace]
